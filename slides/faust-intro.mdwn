% Introdução a Faust
% Gilmar Dias; André J. Bianchi
% 22/11/2012

A linguagem
===========

FAUST - Functional AUdio STream
-----------

  * É uma linguagem de especificação (de *processadores de sinais*).
  * Compilada: FAUST -> C++ -> binários executáveis.
  * Opera no nível amostral.
  * Semântica simples e bem definida.
  * Orientada a diagramas de bloco utilizando programação funcional.
  * Pode ser utilizado em diversas "arquiteturas".
  * Descreve um processador de sinais.

IDE Experimental - FaustWorks
----------------

Requisitos:

  * Faust
  * Qt4

Download:

* http://faust.grame.fr/

Instalação:

    $ qmake-qt4
    $ make

Estrutura de um programa
--------------------------------------

Expressões:

  * Bloco primitivo.
  * Combinação de expressões via operadores de composição.
  * Representa um diagrama de blocos.

Definições:

  * Identifiação de expressões:

        nome_do_bloco = expressão ;

  * O nome do bloco deve começar com letra, pode ter símbolos e '_'.

Estrutura de um programa
--------------------------------------

![Definições em um diagrama de blocos](./img/4-1_process.png)

Estrutura de um programa
--------------------------------------

Programa em Faust: sequência desordenada de definições.

  * Apenas uma definição é obrigatória:

    	process

Comentários:

  * Como em C/C++

    	//, /* ... */

Estrutura de um programa
--------------------------------------

Exemplo:

~~~{.Javascript .numberLines}
declare name "noise";
declare copyright "(C)GRAME 2006";

import("music.lib");

// noise level controlled by a slider
process = noise * vslider("volume", 0, 0, 1, 0.1);
~~~

A linguagem - Primitivas
----------

Blocos de conexão (plug boxes):

  * Identidade (`_`).

  ![Bloco identidade](./img/2-1-1_identity.png)

  * Corte (`!`).

  ![Bloco corte](./img/2-1-2_cut.png)

A linguagem - Primitivas
----------

Operadores matemáticos:

  * Aritméticos (`+, -, *, /` e `%`).

  ![Blocos de operadores aritiméticos](./img/2-2_arithmetic.png)

  * Comparação (`<=, >=, <, >, ==` e `!=`).

A linguagem - Primitivas
----------

  * Operadores bit a bit (`<<, >>, &, |` e `^`).
  * Constantes:
    * Literais em C++
    * int: '#', float: '#.#'

    ![Constantes em Faust](./img/2-4_constants.png)

A linguagem - Primitivas
----------

  * Conversões de tipo em Faust (casting):

    ![Conversões de tipo em Faust](./img/2-5_casting.png)

  * Funções estrangeiras:

        ffunction(prototipo, include, biblioteca)

Primitivas - Memórias
----------

![Atraso simples](./img/2-7-1_mem.png)

Primitivas - Memórias
----------

  * Tabela somente de leitura

  ![](./img/2-7-2_rdtable1.png)
  ![rdtable durante a execução](./img/2-7-2_rdtable2.png)

Primitivas - Memórias
----------

![Tabela de leitura e escrita](./img/2-7-3_rwtable.png)


A linguagem - Primitivas
----------

![Chaves de seleção: select2 e select3](./img/2-8_select.png)

Primitivas - Interface gráfica com o usuário
----------

![Botão - \texttt{button("label")}](./img/2-9-1_button.png)

Primitivas - Interface gráfica com o usuário
----------

![Checkbox: \texttt{checkbox("label")}](./img/2-9-2_checkbox.png)

Primitivas - Interface gráfica com o usuário
----------

![Sliders: \texttt{ hslider("label", inicio, fim, max, passo)}](./img/2-9-3_sliders.png)

Primitivas - Interface gráfica com o usuário
----------

![Entrada numérica: \texttt{nentry("label", inicio, fim, max, passo)}](./img/2-9-4_nentry.png)


Primitivas - Interface gráfica com o usuário
----------

  * Grupos
    hgroup, vgroup, tgroup

  ![](./img/2-9-5_groups.png)

    tgroup("Sliders", (A,B,C))


A linguagem - Operadores de composição
-----------------------

  * Serial (`:`)

![Operador serial](./img/3-1_serial1.png)

A linguagem - Operadores de composição
-----------------------

* Serial (`:`)

![Operador serial](./img/3-1_serial2.png)

A linguagem - Operadores de composição
-----------------------

* Serial (`:`)

![Operador serial](./img/3-1_serial3.png)

A linguagem - Operadores de composição
-----------------------

* Paralelo (`,`)

![Operador paralelo](./img/3-2_parallel.png)

A linguagem - Operadores de composição
-----------------------

* Split (`<:`)

![Operador split](./img/3-3_split1.png)

A linguagem - Operadores de composição
-----------------------

* Split (`<:`)

![Operador split](./img/3-3_split2.png)

A linguagem - Operadores de composição
-----------------------

* Split (`<:`)

![Operador split](./img/3-3_split3.png)

A linguagem - Operadores de composição
-----------------------

* Merge (`:>`)

![Operador merge](./img/3-4_merge.png)

A linguagem - Operadores de composição
-----------------------

* Recursivo (`~`)

![Operador recursivo](./img/3-5_recursive1.png)

Operadores de composição
-----------------------

* Recursivo (`~`)

![Operador recursivo](./img/3-5_recursive2.png)

Precedência de operadores
-------------------------

![Precedência](./img/3-6_precedence1.png)

Precedência de operadores
-------------------------

![Precedência](./img/3-6_precedence2.png)

A linguagem - Abstrações
----------

![Abstrações](./img/4-3_abstraction.png)

    A(x,y) = (x,y):(y,x)
    B = ...
    C = ...
    D = A(B,C)

Açúcar sintático
----------------

Operadores matemáticos podem ser usados de forma mais simples:

    A/B  = (A,B) : /
    /(A) = (_,A) : /

Exemplos
========

Exemplo 1
---------

Onda quadrada


Onda quadrada: blocos básicos
-----------------------------

![Um contador de 0 até N-1](./img/square-i.png)

Onda quadrada: blocos básicos
-----------------------------

![Gerador de onda quadrada.](./img/square-process.png)

Onda quadrada: sliders
----------------------

Elementos de interface gráfica:

    vslider(str, cur, min, max, step)
    hslider(str, cur, min, max, step)

Onda quadrada: código
---------------------

~~~{.Javascript .numberLines}
//     A square wave oscillator
//---------------------------------
T = hslider("Period",1,0.1,100.,0.1); // Period (ms)
N = 44100./1000.*T:int; // The period in samples
a = hslider("Cyclic ratio",0.5,0,1,0.1); // Cyclic ratio
i = +(1)~%(N):-(1); // 0,1,2...,n
process = i,N*a : < : *(2) : -(1) ;
~~~

Onda quadrada: demo
-------------------

Demonstração:

    ./square -cyclicratio 0.5 -n 44100 -period 100

Exemplo 2: Onda senoidal
------------------------

Onda senoidal: blocos básicos
-----------------------------

![Tempo discreto: 0, 1, 2, 3, ...](./img/sineosc-time.png)

Onda senoidal: blocos básicos
-----------------------------

![Forma de onda senoidal](./img/sineosc-sinwaveform.png)

Onda senoidal: blocos básicos
-----------------------------

![Cálculo da fase](./img/sineosc-phase.png)

Onda senoidal: leitura de tabela
--------------------------------

![Forma de onda senoidal](./img/sineosc-freq.png)

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
//-----------------------------------------------
//      Sinusoidal Oscillator
//-----------------------------------------------
// Mathematical functions & constants
//------------------------------------
sin   = ffunction(float sin (float), <math.h>, "");
floor = ffunction(float floor (float), <math.h>, "");
PI    = 3.1415926535897932385;
~~~

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
// Oscillator definition
//--------------------------
tablesize    = 40000 ;
samplingfreq = 44100. ;
time        = (+(1)~_) - 1; // O,1,2,3,...
sinwaveform = time*(2*PI)/tablesize : sin;
decimal     =  _ <: -(floor);
phase(freq) = freq/samplingfreq :
                  (+ : decimal) ~ _ : *(tablesize) : int ;
osc(freq)   = phase(freq) : rdtable(tablesize,sinwaveform);
~~~

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
// User interface
//----------------
vol = hslider("volume", 0, 0, 1, 0.001);
freq = hslider("freq", 400, 0, 15000, 0.1);
//----------------
process = osc(freq) * vol;
~~~

Onda senoidal: demo
---------------------

Demonstração:

    ./sineosc -freq 440 -n 44100 -volume 1

Exemplo 3: Gerador de ruído aleatório
-------------------------------------

Gerador de ruído aleatório: código
----------------------------------

~~~{.Javascript .numberLines}
//-----------------------------------------------
//          Two noises compared
//-----------------------------------------------

RANDMAX = 2147483647;

random1 = ffunction(int random (), <stdlib.h>, "");
noise1 = (random1 << 1) * (1.0/RANDMAX);

random2 = (*(1103515245)+12345) ~ _ ;
noise2 = random2 * (1.0/RANDMAX);

compare(a,b) = (a*(1-button("Switch")) +
                                b*button("Switch"));

process = compare(noise1, noise2) *
          hslider("volume", 0, 0, 1, 0.01) <: _,_  ;
~~~

Gerador de ruído aleatório: demo
--------------------------------

Demonstração: comparação de gráficos e som.

Exemplo 4: Karplus Strong
-------------------------

Karplus Strong: demo
--------------------

Demonstração: tosco e bem feito.

Exemplo 5: Freeverb
-------------------

Freeverb: código
----------------

~~~{.Javascript .numberLines}
monoReverb(fb1, fb2, damp, spread)
	= _ <:	comb(combtuningL1+spread, fb1, damp),
			comb(combtuningL2+spread, fb1, damp),
			comb(combtuningL3+spread, fb1, damp),
			comb(combtuningL4+spread, fb1, damp),
			comb(combtuningL5+spread, fb1, damp),
			comb(combtuningL6+spread, fb1, damp),
			comb(combtuningL7+spread, fb1, damp),
			comb(combtuningL8+spread, fb1, damp)
		+>
		 	allpass (allpasstuningL1+spread, fb2)
		:	allpass (allpasstuningL2+spread, fb2)
		:	allpass (allpasstuningL3+spread, fb2)
		:	allpass (allpasstuningL4+spread, fb2)
		;
~~~

Freeverb: código
----------------

~~~{.Javascript .numberLines}
stereoReverb(fb1, fb2, damp, spread)
	= + <: 	monoReverb(fb1, fb2, damp, 0), monoReverb(fb1, fb2, damp, spread);
~~~

Freeverb: demo
--------------

Demonstração: FaustWorks e LADSPA.


Conclusão
=========

Outros exemplos
---------------

* capture.
* dbmeter.
* echo.
* noise.
* multiband-filter.

Outras arquiteturas
-------------------

* Alsa + {GTK,QT}
* Csound
* iPhone
* jack {GTK,QT}
* Ladspa
* lv2
* Max MSP
* Octave
* OSS
* Pure Data
* VST
* ... e muitas outras.

Fim!
----

Obrigado pela atenção!

* Faust: http://faust.grame.fr/
* Contato: {grodias,ajb}@ime.usp.br
* Grupo de Computação Musical do IME/USP: http://compmus.ime.usp.br/
