% Introdução a Faust
% Gilmar Dias; André J. Bianchi
% 22/11/2012

A linguagem
===========

Faust - Functional AUdio STream
---

  * É uma linguagem de especificação (de *processadores de sinais*).
  * Compilada: FAUST -> C++ -> binários executáveis.
  * Opera no nível amostral.
  * Semântica simples e bem definida.
  * Orientada a diagramas de bloco utilizando programação funcional.
  * Pode ser utilizado em diversas "arquiteturas".
  * Descreve um processador de sinais.


Operadores
---

  * : (composição)
  * , (paralelismo)
  * ~
  * <:
  * :>

FaustWorks
==========

FaustWorks
---

FaustWorks é um IDE para a linguagem de programação dsp Faust.

Atenção: FaustWorks é altamente experimental.

    git clone \
    git://faudiostream.git.sourceforge.net/gitroot/faudiostream/FaustWorks



Dependências para entender os exemplos
---

* Açúcar sintático.
* GUI: hslider, vslider, button.
* nentry

Açúcar sintático
---

Operadores matemáticos podem ser usados de forma mais simples:

    A/B  = (A,B) : /
    /(A) = (_,A) : /

Arquiteturas
---

* Alsa + {GTK,QT}
* Csound
* iPhone
* jack {GTK,QT}
* Ladspa
* lv2
* Max MSP
* Octave
* OSS
* Pure Data
* VST
* ... e muitas outras.

Faust na linha de comando
---

Algumas opções interessantes:

    -tg     print the internal --task-graph in dot format file
    -sg     print the internal --signal-graph in dot format file
    -ps     print block-diagram --postscript file
    -svg    print block-diagram --svg file
    -mdoc   print --mathdoc of a Faust program in LaTeX format in a -mdoc directory
    -vs <n> --vec-size <n> size of the vector (default 32 samples)
    -omp    --openMP generate OpenMP pragmas, activates --vectorize option
    -pl     --par-loop generate parallel loops in --openMP mode
    -single use --single-precision-floats for internal computations (default)
    -double use --double-precision-floats for internal computations
    -quad   use --quad-precision-floats for internal computations
    -norm   --normalized-form prints signals in normalized form and exits



Exemplo 1: Onda quadrada
========================

Onda quadrada: blocos básicos
-----------------------------

![Um contador de 1 até N](./img/square-i.png)

Onda quadrada: blocos básicos
-----------------------------

![Gerador de onda quadrada.](./img/square-process.png) 

Onda quadrada: sliders
----------------------

Elementos de interface gráfica:

    vslider(str, cur, min, max, step)
    hslider(str, cur, min, max, step)

Onda quadrada: código
---------------------

~~~{.Javascript .numberLines}
//     A square wave oscillator
//---------------------------------
T = hslider("Period",1,0.1,100.,0.1); // Period (ms)
N = 44100./1000.*T:int; // The period in samples
a = hslider("Cyclic ratio",0.5,0,1,0.1); // Cyclic ratio
i = +(1)~%(N):-(1); // 0,1,2...,n
process = i,N*a : < : *(2) : -(1) ;
~~~

Onda quadrada: demo
-------------------

Demonstração:

    ./square -cyclicratio 0.5 -n 44100 -period 100


Exemplo 2: Onda senoidal
========================

Onda senoidal: blocos básicos
-----------------------------

![Tempo discreto: 0, 1, 2, 3, ...](./img/sineosc-time.png)

Onda senoidal: blocos básicos
-----------------------------

![Forma de onda senoidal](./img/sineosc-sinwaveform.png)

Onda senoidal: blocos básicos
-----------------------------

![Cálculo da fase](./img/sineosc-phase.png)

Onda senoidal: tabelas
-----------------------------

![Definição de tabelas](./img/tables.png)

Onda senoidal: leitura de tabela
--------------------------------

![Forma de onda senoidal](./img/sineosc-freq.png)

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
//-----------------------------------------------
//      Sinusoidal Oscillator
//-----------------------------------------------
// Mathematical functions & constants
//------------------------------------
sin   = ffunction(float sin (float), <math.h>, "");
floor = ffunction(float floor (float), <math.h>, "");
PI    = 3.1415926535897932385;
~~~

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
// Oscillator definition
//--------------------------
tablesize    = 40000 ;
samplingfreq = 44100. ;
time        = (+(1)~_) - 1; // O,1,2,3,...
sinwaveform = time*(2*PI)/tablesize : sin;
decimal     =  _ <: -(floor);
phase(freq) = freq/samplingfreq :
                  (+ : decimal) ~ _ : *(tablesize) : int ;
osc(freq)   = phase(freq) : rdtable(tablesize,sinwaveform);
~~~

Onda senoidal: código
---------------------

~~~{.Javascript .numberLines}
// User interface
//----------------
vol = hslider("volume", 0, 0, 1, 0.001);
freq = hslider("freq", 400, 0, 15000, 0.1);
//----------------
process = osc(freq) * vol;
~~~

Onda senoidal: demo
---------------------

Demonstração:

    ./sineosc -freq 440 -n 44100 -volume 1

Exemplo 3: Gerador de ruído aleatório
=====================================

Gerador de ruído aleatório: código
----------------------------------

~~~{.Javascript .numberLines}
//-----------------------------------------------
//          Two noises compared
//-----------------------------------------------

RANDMAX = 2147483647;

random1 = ffunction(int random (), <stdlib.h>, "");
noise1 = (random1 << 1) * (1.0/RANDMAX);

random2 = (*(1103515245)+12345) ~ _ ;
noise2 = random2 * (1.0/RANDMAX);

compare(a,b) = (a*(1-button("Switch")) +
                                b*button("Switch"));

process = compare(noise1, noise2) *
          hslider("volume", 0, 0, 1, 0.01) <: _,_  ;
~~~

Gerador de ruído aleatório: demo
--------------------------------

Demonstração: comparação de gráficos e som.

Exemplo 4: Karplus Strong
=========================

Karplus Strong: demo
--------------------

Demonstração: tosco e bem feito.

Exemplo 5: Freeverb
===================

freeverb: código
----------------

~~~{.Javascript .numberLines}
monoReverb(fb1, fb2, damp, spread)  
	= _ <:	comb(combtuningL1+spread, fb1, damp),
			comb(combtuningL2+spread, fb1, damp),
			comb(combtuningL3+spread, fb1, damp),
			comb(combtuningL4+spread, fb1, damp),
			comb(combtuningL5+spread, fb1, damp),
			comb(combtuningL6+spread, fb1, damp),
			comb(combtuningL7+spread, fb1, damp),
			comb(combtuningL8+spread, fb1, damp) 
		+>	
		 	allpass (allpasstuningL1+spread, fb2)
		:	allpass (allpasstuningL2+spread, fb2)
		:	allpass (allpasstuningL3+spread, fb2)
		:	allpass (allpasstuningL4+spread, fb2) 
		;
~~~

Freeverb: código
----------------

~~~{.Javascript .numberLines}
stereoReverb(fb1, fb2, damp, spread)
	= + <: 	monoReverb(fb1, fb2, damp, 0), monoReverb(fb1, fb2, damp, spread);
~~~

Freeverb: demo
--------------

Demonstração: FaustWorks e LADSPA.


Conclusão
=========

Outros exemplos
---------------

* capture.
* dbmeter.
* echo.
* noise.
* multiband-filter.

Fim!
----

Obrigado pela atenção!

* Faust: http://faust.grame.fr/
* Contato: {grodias,ajb}@ime.usp.br
* Grupo de Computação Musical do IME/USP: http://compmus.ime.usp.br/
